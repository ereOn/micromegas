searchState.loadedDescShard("micromegas_tracing", 0, "Tracing crate\nLogs a message at the debug level.\nWhere events are recorded and eventually sent to a sink\nLogs a message at the error level.\nError types and handling for tracing operations\nStructure to record events in memory\nLogs a message representing a crash or panic\nFlushMonitor triggers the flush of the telemetry streams …\nRecords a float metric.\nRAII-style guards\nRecords a integer metric.\nLogs a message at the info level.\nInstruments a future with a named span. Usage: …\nStore dynamically-created strings in a global container. …\nVerbosity management\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nEvents representing a process’s log\nEvents representing a measured scalar at a point in time\nReports panics as fatal log entries and shuts down the …\nManual parsing of dynamically sized events\nCommonly used items for convenient importing - includes …\nProcess metadata\nInterned collection of PropertySet instances. Each …\nRuntime integration utilities for micromegas tracing\nInstruments an async block with a named span using a …\nRecords a sync span as two thread events\nRecords a span with a name that is determined at runtime. …\nEvents reprensenting units of code execution\nCreates a static SpanLocation for use with named async …\nStaticStringRef points to a string dependency keeping …\nStringId serializes the value of the pointer and the size …\nTest utilities for in-memory tracing in unit tests\nSystem &amp; monotonic tick count\nLogs a message at the trace level.\nLogs a message at the warn level.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnregisters the current thread’s stream from the global …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlocks are a batch of events sent as a unit\ninterface needed by the dispatch module to send out …\nEventStream are a sequence of blocks sent (or dropped) as …\nSerialize the dependencies of the events in the primary …\nfor tests where the data can be dropped\nStreamDesc is the metadata associated with an event stream\nEvent blocks must adhere to TracingBlock in order to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfor tests where we want to inspect the collected data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the total number of log blocks collected\nGet the total number of metrics blocks collected\nGet the total number of thread blocks collected\nGet the total number of events across all log blocks\nGet the total number of events across all metrics blocks\nGet the total number of events across all thread blocks\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a new system guard that initializes the …\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nThe “fatal” level.\nCorresponds to the <code>Fatal</code> log level.\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAn enum representing the verbosity levels for logging.\nAn enum representing the available verbosity level filters …\nAn enum representing the available verbosity level filters …\nThe “Max” level.\nCorresponds to the <code>Max</code> log level.\nThe “med” level.\nCorresponds to the <code>Med</code> log level.\nThe “min” level.\nCorresponds to the <code>Min</code> log level.\nA level lower than all log levels.\nA level lower than all log levels.\nThe statically resolved maximum log level.\nThe statically resolved maximum metrics/spans lod.\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nAn enum representing the level of verbosity for <code>metrics</code>/…\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nReturns the string representation of the <code>Lod</code>.\nReturns the string representation of the <code>LodFilter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the current maximum log level.\nReturns the current maximum log level.\nSets the global maximum log level.\nSets the global maximum log level.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts <code>self</code> to the equivalent <code>Lod</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nConverts the <code>Lod</code> to the equivalent <code>LodFilter</code>.\nThe filter is up to date but no filter is set.\nThe filter needs to be updated.\nThe filter is up to date a filter level is set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a way to efficiency implement finer grade …\nSets the level filter if the generation is greater than …\nMeasure (float) with static metadata\nMeasure (int) with static metadata Will be converted to a …\nWire format reprensenting an instance of …\nstatic metadata about metric events\nMeasure (float) with a dynamic set of properties\nMeasure (int) with a dynamic set of properties\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDictionnary of custom readers for dynamically sized events\nLogs a message at the debug level.\nLogs a message at the error level.\nLogs a message representing a crash or panic\nRecords a float metric.\nRecords a integer metric.\nLogs a message at the info level.\nInstruments a future with a named span. Usage: …\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nlog_fn: log the execution of a function\nInstruments an async block with a named span using a …\nspan_fn: trace the execution of sync functions, async …\nRecords a sync span as two thread events\nRecords a span with a name that is determined at runtime. …\nCreates a static SpanLocation for use with named async …\nLogs a message at the trace level.\nLogs a message at the warn level.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRFC 3339\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for <code>tokio::runtime::Builder</code> that adds …\nConfigures the runtime builder with standard tracing …\nConfigures the runtime builder with tracing callbacks and …\nTrait for adding instrumentation to futures\nA wrapper that instruments a future with async span tracing\nA wrapper that instruments a future with named async span …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstrument this future with the given span metadata\nInstrument this future with the given span metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instrumented future\nCreate a new instrumented named future\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRAII guard for in-memory tracing that handles cleanup\nReturns the argument unchanged.\nInitialize in-memory tracing for unit tests\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")