searchState.loadedDescShard("micromegas_analytics", 0, "Micromegas analytics: makes the telemetry data lake …\nConvert arrow array into Property instances\nMisc arrow utilities\nProcessing of async events from thread event blocks\nIn-memory async events in arrow format\nTransforms thread events into call trees\nRemoval of old data\nDatafusion extensions\nModule dedicated to the maintenance and query of …\nIn-memory log entries in arrow format\nParsing of log entries from telemetry payload\nParsing of metrics from telemetry payload\nAccess to the metadata stored in the relational database\nIn-memory metrics in arrow format\nAccess to the raw binary telemetry payload\nUDF to convert properties to dictionary-encoded arrays …\nbulk metadata &amp; payload ingestion using Arrow\nStreams response for long requests\nLocation in instrumented source code\nIn-memory call tree in arrow format\nConvert sqlx rows into arrow format\nParses thread event streams\nConversion between ticks and more convenient date/time …\nAdds a set of properties from a <code>HashMap</code> to an Arrow list …\nAdds a set of properties from a <code>HashMap</code> to a …\nAdds a set of properties from a <code>PropertySet</code> to an Arrow …\nAdds a set of properties from a <code>PropertySet</code> to a …\nReads a list of properties from an Arrow array.\nSerializes properties from a HashMap to JSONB bytes.\nSerializes properties from a PropertySet to JSONB bytes.\nCreates an empty record batch with an empty schema.\nParses Parquet metadata from a byte slice.\nSerializes Parquet metadata to a byte slice.\nTrait for processing async event blocks.\nParses async span events from a thread event block payload.\nRepresents a single async span event record. Optimized for …\nA builder for creating a <code>RecordBatch</code> of async event …\nReturns the schema for the async events table. Optimized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA call tree, representing the execution of a single thread.\nA builder for creating a <code>CallTree</code> from a stream of thread …\nA node in a call tree, representing a single scope …\nThe start time of the scope instance in nanoseconds.\nThe root node of the call tree.\nThe children of this node in the call tree.\nThe end time of the scope instance in nanoseconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the scope description.\nThe unique identifier of the scope instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a call tree from a set of thread event blocks.\nA map from scope hash to scope description.\nDeletes all empty processes from the data lake.\nDeletes a batch of empty processes from the data lake. …\nDeletes all empty streams from the data lake.\nDeletes a batch of empty streams from the data lake. …\nDeletes all expired blocks from the data lake.\nDeletes a batch of expired blocks from the data lake. …\nDeletes all data older than a specified number of days …\nWrite log entries as a SendableRecordBatchStream\nUnified binary column accessor for Arrow arrays\nUtilities to help deal with df expressions\nCompute histograms from SQL\nHelper to create JSON table providers\nJSONB support\nStream a function’s log as a table\nConvert a filtering expression to a physical predicate\nUnified string column accessor for Arrow arrays\nExecution plan interface for an async task\nAccess to a RecordBatch’s columns\nA stream of log messages that can be converted into a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a DataFusion expression to a f64.\nConverts a DataFusion expression to an i64.\nConverts a DataFusion expression to a string.\nConverts a DataFusion expression to a timestamp.\nSimplifies a DataFusion expression.\nGet the count &amp; sum of the values in the histogram\nHistogram accumulation\nHistogram data structures and aggregate function\nEstimate quantiles based on a histogram\nMerge a column of histograms of the same shape\nCompute variance from running sum and sum of squares in …\nCreates a user-defined function to extract the count from …\nCreates a user-defined function to extract the sum from a …\nAn accumulator for computing histograms.\nif not configured, will take the first instance of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the Arrow fields for the histogram state.\nAn array of histograms.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a user-defined aggregate function to compute …\nCreates a user-defined function to estimate quantiles from …\nCreates a user-defined aggregate function to sum …\nCreates a user-defined function to compute the variance …\nCreates a TableProvider for a JSON file with pre-computed …\ntype conversions\njsonb-&gt;json\nget by name\njsonb_parse\nCreates a user-defined function to cast a JSONB value to a …\nCreates a user-defined function to cast a JSONB value to …\nCreates a user-defined function to cast a JSONB value to a …\nA scalar UDF that formats JSONB binary data as a JSON …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a user-defined function to format a JSONB value as …\nCreates a user-defined function to get a value from a …\nCreates a user-defined function to parse a JSON string …\nA DataFusion <code>TableProvider</code> for a log stream.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe underlying log stream execution plan.\nConverts a list of DataFusion <code>Expr</code> filters into a single …\nAn <code>ExecutionPlan</code> that provides a stream of log messages.\nA type alias for a function that spawns a log message …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieves the single primitive value from the first column …\nRetrieves the single string value from the first column of …\nRetrieves the single primitive value from an indexed …\nRetrieves the single primitive value from a named column …\nRetrieves a typed column from a <code>RecordBatch</code> by index.\nRetrieves a typed column from a <code>RecordBatch</code> by name.\nRecord batches + schema\nImplementation of <code>BlockProcessor</code> for async events\nMaterializable view of async span events accessible …\nWrite parquet in object store\nBatchPartitionMerger merges multiple partitions by …\nMaterialize views on a schedule based on the time data was …\nSpecification for a view partition backed by a set of …\nReplicated view of the <code>blocks</code> table of the postgresql …\nCatalog utilities for discovering and managing view schemas\nExport mechanism that doubles as audit trail\nFetch payload from the object store using SQL\nManagement of process-specific partitions built on demand\nRead access to the list of lakehouse partitions\nRead access to view sets with their schema information\nImplementation of <code>BlockProcessor</code> for log entries\nSQL-based view for log statistics aggregated by process, …\nMaterializable view of log entries accessible through …\nExposes materialize_partitions as a table function\nTableProvider implementation for the lakehouse\nMerge consecutive parquet partitions into a single file\nSpecification for a view partition backed by a table in …\nImplementation of <code>BlockProcessor</code> for measures\nMaterializable view of measures accessible through …\nMaintenance of the postgresql tables and indices use to …\nWrite &amp; delete sections of views\nIn-memory copy of a subnet of the list of the partitions …\nOperations on the dedicated partition_metadata table\nDescribes the event blocks backing a partition\nExecutionPlan based on a set of parquet files\nTableProvider based on a set of parquet files\nExecutionPlan for generating Perfetto trace chunks\nTable function for generating Perfetto trace chunks\nReplicated view of the <code>processes</code> table of the postgresql …\nproperty_get function support from SQL Datafusion …\nWrapper around ParquetObjectreader to provide …\nScalar UDF to retire a single partition by file path\nExposes retire_partitions as a table function\nRuntime resources\nSessionConfigurator trait for custom session context …\nSql-defined view updated in batch\nSpecification for a view partition backed by a SQL query …\nReplicated view of the <code>streams</code> table of the postgresql …\nRewrite table scans to take the query range into account\nTracking of expired partitions\nJit view of the call tree built from the thread events of …\nBasic interface for a set of rows queryable and …\n<code>default_view_factory</code> makes the default <code>ViewFactory</code>, giving …\nTable function to query process-specific views\nAdd or remove view partitions\nRecord batches + schema\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe record batches.\nThe schema of the record batches.\nA <code>BlockProcessor</code> implementation for processing async event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA view of async span events.\nA <code>ViewMaker</code> for creating <code>AsyncEventsView</code> instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Parquet writer that writes to an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMerges multiple partitions by splitting the work in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAbort the partition creation.\nCreate the partition from the source data.\nMerge existing partitions.\nDefines the strategy for creating a new partition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaterializes partitions within a given time range.\nBlockPartitionSpec processes blocks individually and out …\nBlockProcessor transforms a single block of telemetry into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses a single block of telemetry.\nA view of the <code>blocks</code> table, providing access to telemetry …\nReturns the file schema hash for the blocks view.\nReturns the Arrow schema for the blocks view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about a view set’s current schema\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList all view sets with their current schema information …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for creating log entries for export.\nA view for exporting log data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the Arrow schema for the export log.\nA scalar UDF that retrieves the payload of a block from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for Just-In-Time (JIT) partition generation.\nReturns the argument unchanged.\ngenerate_process_jit_partitions lists the partitions that …\nGenerates a segment of JIT partitions filtered by process.\ngenerate_stream_jit_partitions lists the partitiions that …\nGenerates a segment of JIT partitions.\nCalls <code>U::from(self)</code>.\nis_jit_partition_up_to_date compares a partition spec with …\nWrites a partition from a set of blocks.\nA DataFusion <code>TableFunctionImpl</code> for listing lakehouse …\nA DataFusion <code>TableProvider</code> for listing lakehouse …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA DataFusion <code>TableFunctionImpl</code> for listing view sets with …\nA DataFusion <code>TableProvider</code> for listing view sets with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>BlockProcessor</code> implementation for processing log blocks.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SqlBatchView</code> for log statistics aggregated …\nA view of log entries.\nA <code>ViewMaker</code> for creating <code>LogView</code> instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA DataFusion <code>TableFunctionImpl</code> for materializing lakehouse …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA DataFusion <code>TableProvider</code> for materialized views.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTell DataFusion to push filters down to the scan method\nA trait for merging partitions.\nA <code>PartitionMerger</code> that executes a SQL query to merge …\nCreates a merged partition from a set of existing …\nExecutes the merge query.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrates the lakehouse schema to the latest version.\nPartition metadata (without embedded file_metadata for …\nReturns the beginning of the insert time range.\nReturns the end of the insert time range.\nThe event time range for this partition. None for empty …\nThe path to the Parquet file for this partition. None for …\nThe size of the Parquet file in bytes. 0 for empty …\nReturns the argument unchanged.\nThe insert time range for this partition.\nCalls <code>U::from(self)</code>.\nReturns true if this partition has no data (num_rows = 0).\nReturns the max event time, if this partition has data.\nReturns the min event time, if this partition has data.\nThe number of rows in this partition. 0 for empty …\nA hash of the source data that generated this partition.\nThe last time this partition was updated.\nValidates partition invariants. Returns error if partition …\nMetadata about the view this partition belongs to.\nA <code>QueryPartitionProvider</code> that fetches partitions directly …\nA <code>QueryPartitionProvider</code> that always returns an empty list …\nPartitionCache allows to query partitions based on the …\nA partition with its file metadata loaded on-demand. This …\nA trait for providing queryable partitions.\nFetches partitions based on the provided criteria.\nunlike LivePartitionProvider, the query_range is tested …\nfetches the partitions of all views matching the specified …\nfetches the partitions of a single view instance matching …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience function to create a PartitionWithMetadata …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nDelete multiple partition metadata entries in a single …\nLoad partition metadata by file path from the dedicated …\nA trait for providing blocks of source data for partitions.\nRepresents a single block of source data for a partition.\nA <code>PartitionBlocksSource</code> implementation that fetches blocks …\nA <code>PartitionBlocksSource</code> implementation that stores blocks …\nFetches partition source data from the data lake.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a stream of the source blocks.\nReturns the maximum payload size of the blocks in the …\nReturns the number of blocks in the source.\nReturns a hash of the source data.\nConverts a hash (expected to be an i64 as bytes) to an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no blocks in the source.\nCreates a partitioned execution plan for scanning Parquet …\nA DataFusion <code>TableProvider</code> for a set of pre-defined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTell DataFusion to push filters down to the scan method\nExecution plan that generates Perfetto trace chunks\nTableProvider wrapper for PerfettoTraceExecutionPlan\nSpan types to include in the trace\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>PerfettoTraceTableFunction</code> generates Perfetto trace chunks …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate the output schema for the table function\nCreates a new <code>SqlBatchView</code> for processes.\nquery_partitions_context returns a context to run queries …\nregister functions that are not depended on the lakehouse …\nregister functions that are part of the lakehouse …\nA wrapper around a <code>ParquetObjectReader</code> that loads metadata …\nA custom <code>ParquetFileReaderFactory</code> that handles opening …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA scalar UDF that retires a single partition by its file …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a user-defined function to retire a single …\nA DataFusion <code>TableFunctionImpl</code> for retiring lakehouse …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new DataFusion <code>RuntimeEnv</code> with a configurable …\nDefault no-op implementation of SessionConfigurator\nTrait for configuring a SessionContext with additional …\nConfigure the given SessionContext (e.g., register custom …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type alias for a function that creates a <code>PartitionMerger</code>.\nSQL-defined view updated in batch\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArguments\nA <code>PartitionSpec</code> implementation for SQL-defined partitions.\nFetches a <code>SqlPartitionSpec</code> by executing a count query and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SqlBatchView</code> for streams.\nAn analyzer rule that rewrites table scans to include …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeletes expired temporary files from the data lake.\nA view of thread spans.\nA <code>ViewMaker</code> for creating <code>ThreadSpansView</code> instances.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait for defining a partition specification.\nA trait for defining a view.\nMetadata about a view.\nReturns the argument unchanged.\nget_file_schema returns the schema of the partition file …\nget_file_schema_hash returns a hash (can be a version …\nallow the view to subdivide the requested partition\nReturns a hash of the source data.\ntells the daemon which view should be materialized and in …\nget_view_instance_id can be a process_id, a stream_id or …\nname of the table from the user’s perspective\nCalls <code>U::from(self)</code>.\nReturns true if the partition is empty.\njit_update creates or updates process-specific partitions …\nmake_batch_partition_spec determines what should be found …\nmake_time_filter returns a set of expressions that will …\nregister the table in the SessionContext\nWrites the partition to the data lake.\nA factory for creating and managing views.\nA trait for creating views.\nCreates the default <code>ViewFactory</code> with all built-in views.\nReturns the argument unchanged.\nReturns the schema for views created by this maker.\nReturns the schema hash for views created by this maker.\nCalls <code>U::from(self)</code>.\nCreates a new view with the given instance ID.\n<code>ViewInstanceTableFunction</code> gives access to any view …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set of rows for a partition, along with their time range.\nAdds a file to the temporary_files table for cleanup.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetires partitions that have exceeded their expiration …\nRetires partitions from the active set. Overlap is …\nWrites a partition to a Parquet file from a stream of …\nA builder for creating a <code>RecordBatch</code> of log entries.\nAppend only per-entry variable data (optimized for batch …\nBatch fill all constant columns for all entries in block\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the schema for the log entries table.\nA single log entry.\nIterates over all log entries in a block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>LogEntry</code> from a <code>Value</code>.\nRepresents a single metric measurement.\nIterates over each metric measurement in a block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>Measure</code> from a <code>Value</code>.\nAnalytics-optimized process metadata.\nType alias for shared, pre-serialized JSONB data. This …\nAnalytics-optimized stream metadata.\nCreates a <code>BlockMetadata</code> from a recordbatch row.\nFinds a process by its ID and returns it as …\nFinds a process and its latest timing information using …\nFinds a stream by its ID and returns it as StreamMetadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates StreamMetadata from StreamInfo by converting …\nReturns the thread name associated with the stream, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ProcessMetadata</code> from a database row with …\nCreates a <code>StreamMetadata</code> from a database row with …\nA builder for creating a <code>RecordBatch</code> of metrics.\nAppend only per-entry variable data (optimized for batch …\nBatch fill all constant columns for all entries in block\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the schema for the metrics table.\nFetches the payload of a block from blob storage.\nParses a block of telemetry data, calling a function for …\nUtility functions for converting between property formats\nTrait for accessing properties columns in a …\nCreates a properties column accessor that automatically …\nCheck if this column is empty.\nCheck if the value at the given index is null.\nGet JSONB bytes for properties at the given index.\nGet the number of rows in this column.\nConvenience function to get a properties column accessor …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA scalar UDF that converts a list of properties to JSONB …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA scalar UDF that retrieves a property from a list of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set of properties, backed by a <code>transit</code> object.\nGet a reference to the underlying <code>Arc&lt;Object&gt;</code> for …\nIterates over the properties in the set.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCustom dictionary builder for PropertySet → JSONB …\nAppend a null value\nAppend PropertySet using pointer-based deduplication\nFinish building and return the DictionaryArray\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the builder is empty\nGet the current number of appended entries\nCreate a new builder with the specified capacity hint\nExtract properties from a properties column accessor at …\nConvert JSONB bytes to a property HashMap\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIngests data from a FlightRecordBatchStream into the …\nA sender for sending log entries to a channel.\nA trait for writing log entries.\nA writer for sending responses to a client.\nTracing logger\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA description of a scope, including its name, location, …\nA hash map of scope descriptions, keyed by their hash.\nComputes the hash of a scope.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for creating a <code>RecordBatch</code> of spans.\nA single span in a call tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the schema for the spans table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>ColumnReader</code> for blob columns.\nA trait for reading a column from a database row and …\nA <code>ColumnReader</code> for <code>i32</code> columns.\nA <code>ColumnReader</code> for <code>i64</code> columns.\nA <code>ColumnReader</code> for properties columns.\nA <code>ColumnReader</code> for string array columns.\nA <code>ColumnReader</code> for string columns.\nA <code>ColumnReader</code> for timestamp columns.\nA <code>ColumnReader</code> for UUID columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ColumnReader</code> for a given database column.\nConverts a slice of database rows to an Arrow <code>RecordBatch</code>.\nA trait for processing thread event blocks.\nParses a thread event block.\nParses a thread event block from a payload.\nConvertTicks helps converting between a process’s tick …\nA time range, with a beginning and an end.\nConverts a <code>DateTime&lt;Utc&gt;</code> to a <code>ScalarValue</code>.\nfrom relative ticks to relative milliseconds\nfrom relative ticks to absolute nanoseconds\nfrom relative ticks to absolute date/time\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the frequency used for tick conversion\nReturns the inverse of the TSC frequency in milliseconds.\nReturns the inverse of the TSC frequency in nanoseconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>ConvertTicks</code> from a block’s metadata.\nCreates a <code>ConvertTicks</code> from a database connection.\nCreates a <code>ConvertTicks</code> using the latest timing information …\nfrom absolute ticks to absolute nanoseconds\nfrom time to relative ticks\nfrom relative time to relative tick count")