searchState.loadedDescShard("micromegas_perfetto", 3, "Not ZigZag encoded.  Negative numbers take 10 bytes.  Use …\nNot ZigZag encoded.  Negative numbers take 10 bytes.  Use …\nLength-delimited aggregate.\n0 is reserved for errors\nUses ZigZag encoding.\nUses ZigZag encoding.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>Label</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Label</code>.\nIndicates the start of actual timeline slice for …\nIndicates the start of actual timeline slice for …\nIndicates the start of expected timeline slice for …\nIndicates the start of expected timeline slice for …\nFrameEnd just sends the cookie to indicate that the …\nSpecifies the severity of a jank.\nSpecifies the reason(s) most likely to have caused the …\nSpecifies if the predictions for the frame are still …\nSpecifies how a frame was presented on screen w.r.t. …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>cookie</code>, or the default value if <code>cookie</code>…\nReturns the value of <code>cookie</code>, or the default value if <code>cookie</code>…\nReturns the value of <code>cookie</code>, or the default value if <code>cookie</code>…\nReturns the value of <code>cookie</code>, or the default value if <code>cookie</code>…\nReturns the value of <code>cookie</code>, or the default value if <code>cookie</code>…\nCookie used to correlate between the start and end …\nCookie used to correlate between the start and end …\nCookie used to correlate between the start and end …\nCookie used to correlate between the start and end …\nReturns the value of <code>display_frame_token</code>, or the default …\nReturns the value of <code>display_frame_token</code>, or the default …\nThe corresponding DisplayFrame token is required to link …\nThe corresponding DisplayFrame token is required to link …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>JankType</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>JankSeverityType</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>PresentType</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>PredictionType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nReturns the value of <code>gpu_composition</code>, or the default value …\nReturns the value of <code>gpu_composition</code>, or the default value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>is_buffer</code>, or the default value if …\nReturns <code>true</code> if <code>value</code> is a variant of <code>JankType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>JankSeverityType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PresentType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PredictionType</code>.\nReturns the enum value of <code>jank_severity_type</code>, or the …\nReturns the enum value of <code>jank_severity_type</code>, or the …\nReturns the value of <code>jank_type</code>, or the default value if …\nReturns the value of <code>jank_type</code>, or the default value if …\nA bitmask of JankType. More than one reason can be …\nA bitmask of JankType. More than one reason can be …\nReturns the value of <code>layer_name</code>, or the default value if …\nReturns the value of <code>layer_name</code>, or the default value if …\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>on_time_finish</code>, or the default value …\nReturns the value of <code>on_time_finish</code>, or the default value …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nPid of the app. Used in creating the timeline tracks (and …\nPid of the app. Used in creating the timeline tracks (and …\nPid of SurfaceFlinger. Used in creating the timeline …\nPid of SurfaceFlinger. Used in creating the timeline …\nReturns the enum value of <code>prediction_type</code>, or the default …\nReturns the enum value of <code>prediction_type</code>, or the default …\nReturns the enum value of <code>present_type</code>, or the default if …\nReturns the enum value of <code>present_type</code>, or the default if …\nSets <code>jank_severity_type</code> to the provided enum value.\nSets <code>jank_severity_type</code> to the provided enum value.\nSets <code>prediction_type</code> to the provided enum value.\nSets <code>prediction_type</code> to the provided enum value.\nSets <code>present_type</code> to the provided enum value.\nSets <code>present_type</code> to the provided enum value.\nReturns the value of <code>token</code>, or the default value if <code>token</code> …\nReturns the value of <code>token</code>, or the default value if <code>token</code> …\nReturns the value of <code>token</code>, or the default value if <code>token</code> …\nReturns the value of <code>token</code>, or the default value if <code>token</code> …\nToken received by the app for its work. Can be shared …\nToken received by the app for its work. Can be shared …\nToken received by SurfaceFlinger for its work this.token = …\nToken received by SurfaceFlinger for its work this.token = …\nConfiguration for compact encoding of scheduler events. …\nWhen symbolize_ksyms=true, determines whether the …\nOptional filter for “ftrace/print” events.\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>enabled</code>, or the default value if …\nIf true, and sched_switch or sched_waking ftrace events …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>KsymsMemPolicy</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>KsymsMemPolicy</code>.\nNested message and enum types in <code>PrintFilter</code>.\nReturns the value of <code>allow</code>, or the default value if <code>allow</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Rule</code>.\nMatches an atrace message of the form: <code>type</code>|<code>pid</code>|<code>prefix</code>…\nThis rule matches if the “buf” field contains an …\nThis rule matches if <code>prefix</code> matches exactly with the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>prefix</code>, or the default value if <code>prefix</code>…\nReturns the value of <code>type</code>, or the default value if <code>type</code> is …\nremoved field with id 127;\nremoved field with id 5; removed field with id 6; removed …\nremoved field with id 220; removed field with id 221; …\nremoved field with id 463;\nremoved field with id 459;\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nOptionally-enabled compact encoding of a batch of …\nErrors encountered during parsing of the raw ftrace data. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterned table of unique strings for this bundle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets <code>status</code> to the provided enum value.\nReturns the enum value of <code>status</code>, or the default if the …\nOne per event, index into |intern_table| corresponding to …\nDelta-encoded timestamps across all sched_switch events …\nReturns the value of <code>timestamp</code>, or the default value if …\nTimestamp of the data that we’re unable to parse, in the …\nOne per event, index into |intern_table| corresponding to …\nDelta-encoded timestamps across all sched_waking events …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Phase</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Phase</code>.\nNested message and enum types in <code>Field</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nAllow producer to group counters into block to represent …\nLogical groups for a counter.  This is used in the UI to …\nnext id: 41\nIncludes counters relating to caching and bandwidth.\nValues should be out of 100.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>block_capacity</code>, or the default value …\noptional. Number of counters supported by the block. No …\nReturns the value of <code>block_id</code>, or the default value if …\nrequired. Unique ID for the counter group.\nReturns the value of <code>counter_id</code>, or the default value if …\nlist of counters that are part of the block.\nReturns an iterator which yields the valid enum values …\nReturns the value of <code>description</code>, or the default value if …\nReturns the value of <code>description</code>, or the default value if …\noptional. Description for the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>GpuCounterGroup</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>MeasureUnit</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nNested message and enum types in <code>GpuCounterSpec</code>.\nReturns an iterator which yields the valid enum values …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>GpuCounterGroup</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MeasureUnit</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\noptional. Name of block.\nReturns an iterator which yields the valid enum values …\nAppends the provided enum value to <code>denominator_units</code>.\nAppends the provided enum value to <code>groups</code>.\nAppends the provided enum value to <code>numerator_units</code>.\nReturns the value of <code>select_by_default</code>, or the default …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>counter_id</code>, or the default value if …\nrequired. Identifier for counter.\nReturns the argument unchanged.\nNested message and enum types in <code>GpuCounter</code>.\nCalls <code>U::from(self)</code>.\nrequired. Value of the counter.\nrequired. Value of the counter.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Severity</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Severity</code>.\noptional. Additional data for the user. This may include …\nDeprecated.  Use InternedGpuRenderStageSpecification …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLabels to categorize the hw Queue this event goes on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nNested message and enum types in <code>Specifications</code>.\nLabels to categorize render stage(binning, render, compute …\nReturns the value of <code>value</code>, or the default value if <code>value</code> …\nReturns the value of <code>context</code>, or the default value if …\nReturns the value of <code>description</code>, or the default value if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nrenderEngine composition\nHWC will compose this buffer\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>buffer_id</code>, or the default value if …\nUnique buffer identifier.\nReturns the value of <code>duration_ns</code>, or the default value if …\nIf no duration is set, the event is an instant event.\nReturns the value of <code>frame_number</code>, or the default value if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BufferEventType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BufferEventType</code>.\nReturns the value of <code>layer_name</code>, or the default value if …\nSets <code>type</code> to the provided enum value.\nReturns the enum value of <code>type</code>, or the default if the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Kind</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Kind</code>.\nReturns the value of <code>dump_interval_ms</code>, or the default …\nms to wait between following dumps.\nReturns the value of <code>dump_phase_ms</code>, or the default value …\nms to wait before first dump.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>mountpoint</code>, or the default value if …\nRepresentation of Entry\nNested message and enum types in <code>Entry</code>.\nReturns the argument unchanged.\nReturns the value of <code>inode_number</code>, or the default value if …\nCalls <code>U::from(self)</code>.\nThe path to the file, e.g. “etc/file.xml” List of …\nSets <code>type</code> to the provided enum value.\nReturns the enum value of <code>type</code>, or the default if the …\nThe file type\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>RenderStageCategory</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>RenderStageCategory</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Api</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Api</code>.\nA code range is a virtual memory cage that may contain …\nReturns the value of <code>base_address</code>, or the default value if …\nReturns the value of <code>embedded_blob_code_copy_start_address</code>…\nUsed when short builtin calls are enabled, where embedded …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>is_process_wide</code>, or the default value …\nWhether this code range is shared with other Isolates in …\nReturns the value of <code>size</code>, or the default value if <code>size</code> is …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Kind</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Kind</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nWe inline the fields in V8String here to save some bytes …\nISO/IEC 8859-1:1998 encoding aka latin1 …\nUTF-16 Big Endian Encoding\nUTF-16 Little Endian Encoding\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nIf dump_interval_ms != 0, the following configuration is …\nReturns the value of <code>dump_interval_ms</code>, or the default …\nms to wait between following dumps.\nReturns the value of <code>dump_phase_ms</code>, or the default value …\nms to wait before first continuous dump. A dump is always …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>scan_pids_only_on_start</code>, or the …\nIf true, scans all the processes to find <code>process_cmdline</code> …\nChanges are split into ChangesLsb and ChangesMsb. First 32 …\nunused = 0x00000004;\n0x80000000; (proto stores enums as signed int)\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>b</code>, or the default value if <code>b</code> is unset.\nNested message and enum types in <code>BufferData</code>.\nReturns the value of <code>buffer_id</code>, or the default value if …\nReturns the value of <code>cached_buffer_id</code>, or the default …\nReturns the value of <code>crop_layer_id</code>, or the default value …\nReturns the value of <code>dsdx</code>, or the default value if <code>dsdx</code> is …\nReturns the value of <code>dsdy</code>, or the default value if <code>dsdy</code> is …\nReturns the value of <code>dtdx</code>, or the default value if <code>dtdx</code> is …\nReturns the value of <code>dtdy</code>, or the default value if <code>dtdy</code> is …\nReturns the value of <code>flags</code>, or the default value if <code>flags</code> …\nReturns the value of <code>focusable</code>, or the default value if …\nunused\nReturns the value of <code>frame_number</code>, or the default value if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ChangesLsb</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>ChangesMsb</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>Flags</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>DropInputMode</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nReturns the value of <code>g</code>, or the default value if <code>g</code> is unset.\nReturns the value of <code>global_scale_factor</code>, or the default …\nReturns the value of <code>has_wallpaper</code>, or the default value …\nunused\nReturns the value of <code>height</code>, or the default value if <code>height</code>…\nReturns the value of <code>input_config</code>, or the default value if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ChangesLsb</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ChangesMsb</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Flags</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>DropInputMode</code>.\nReturns the value of <code>layout_params_flags</code>, or the default …\nReturns the value of <code>layout_params_type</code>, or the default …\nReturns the enum value of <code>pixel_format</code>, or the default if …\nReturns the value of <code>r</code>, or the default value if <code>r</code> is unset.\nReturns the value of <code>replace_touchable_region_with_crop</code>, …\nSets <code>pixel_format</code> to the provided enum value.\nReturns the value of <code>surface_inset</code>, or the default value …\nReturns the value of <code>usage</code>, or the default value if <code>usage</code> …\nReturns the value of <code>width</code>, or the default value if <code>width</code> …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BufferDataChange</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>PixelFormat</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BufferDataChange</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PixelFormat</code>.\nRACE (little-endian ASCII)\nLYRT (little-endian ASCII)\nconstant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H &lt;&lt; 32 | …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>MagicNumber</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MagicNumber</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Priority</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Priority</code>.\nMemory snapshot of a process. The snapshot contains memory …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>LevelOfDetail</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>LevelOfDetail</code>.\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nProcess ID of the process\nNested message and enum types in <code>ProcessSnapshot</code>.\nA directed edge that connects any 2 nodes in the graph …\nA single node in the memory graph.\nReturns the value of <code>absolute_name</code>, or the default value …\nAbsolute name is a unique name for the memory node within …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>id</code>, or the default value if <code>id</code> is …\nUnique ID of the node across all processes involved in the …\nReturns the value of <code>importance</code>, or the default value if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>MemoryNode</code>.\nReturns the value of <code>overridable</code>, or the default value if …\nReturns the value of <code>size_bytes</code>, or the default value if …\nSize of the node in bytes, used to compute the effective …\nReturns the value of <code>source_id</code>, or the default value if …\nReturns the value of <code>target_id</code>, or the default value if …\nReturns the value of <code>weak</code>, or the default value if <code>weak</code> is …\nA weak node means that the instrumentation that added the …\nEntries in the memory node that contain statistics and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>MemoryNodeEntry</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nSets <code>units</code> to the provided enum value.\nReturns the enum value of <code>units</code>, or the default if the …\nReturns the value of <code>value_string</code>, or the default value if …\nReturns the value of <code>value_uint64</code>, or the default value if …\nContains either one of uint64 or string value.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Units</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Units</code>.\nThe inlined context for events in this bundle.\nThe intern id for looking up the associated packet context.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>debuggable</code>, or the default value if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>profileable_from_shell</code>, or the …\nReturns the value of <code>uid</code>, or the default value if <code>uid</code> is …\nReturns the value of <code>version_code</code>, or the default value if …\nUse libunwindstack (default):\nUserspace unwinding mode. A possible future addition is …\nDo not unwind userspace:\nReturns the value of <code>additional_cmdline_count</code>, or the …\nNumber of additional command lines to sample. Only those …\nString value of the enum field names used in the ProtoBuf …\nList of excluded cmdlines. See description of …\nList of excluded pids.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>UnwindMode</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>UnwindMode</code>.\nReturns the value of <code>kernel_frames</code>, or the default value …\nIf true, callstacks will include the kernel-space frames. …\nReturns the value of <code>process_shard_count</code>, or the default …\nIf set to N, all encountered processes will be put into …\nDefines a set of processes for which samples are …\nSets <code>user_frames</code> to the provided enum value.\nCommand line allowlist, matched against the …\nProcess ID (TGID) allowlist. If this list is not empty, …\nReturns the enum value of <code>user_frames</code>, or the default if …\nWhether to record and unwind userspace callstacks. If …\nBuiltin counter names from the uapi header. Commented with …\nbranch-instructions, branches\nbranch-misses\nbus-cycles\ncache-misses\ncache-references\ncpu-cycles, cycles\ninstructions\nref-cycles\nstalled-cycles-backend, idle-cycles-backend\nstalled-cycles-frontend, idle-cycles-frontend\nSubset of clocks that is supported by perf timestamping. …\nSyscall-level description of the event, propagated to the …\nalignment-faults\ncontext-switches, cs\ncpu-clock\ncpu-migrations, migrations\ndummy\nemulation-faults\npage-faults, faults\nmajor-faults\nminor-faults\ntask-clock\nWhat event to sample on, and how often. Commented from the …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>config</code>, or the default value if <code>config</code>…\nReturns the value of <code>config1</code>, or the default value if …\nReturns the value of <code>config2</code>, or the default value if …\nCounting event to use as a timebase for the sampling. If …\nReturns the value of <code>filter</code>, or the default value if <code>filter</code>…\nOptional field-level filter for the tracepoint. Only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Counter</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>PerfClock</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nHow often the per-cpu sampling will occur. Not guaranteed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Counter</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PerfClock</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nOptional arbitrary name for the event, to identify it in …\nGroup and name for the tracepoint, acceptable forms:\nSets <code>timestamp_clock</code> to the provided enum value.\nNested message and enum types in <code>Timebase</code>.\nReturns the enum value of <code>timestamp_clock</code>, or the default …\nIf set, samples will be timestamped with the given clock. …\nReturns the value of <code>type</code>, or the default value if <code>type</code> is …\nCounting event to use as a timebase for the sampling. If …\nPer-cpu sampling frequency in Hz, as requested from the …\nHow often the per-cpu sampling will occur. Not guaranteed …\nPer-cpu sampling will occur every |period| counts of …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nIf set, stack unwinding was incomplete due to an error. …\nA notable event within the sampling implementation.\nIf set, indicates that the profiler encountered a sample …\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SampleSkipReason</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SampleSkipReason</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nNested message and enum types in <code>ProducerEvent</code>.\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>DataSourceStopReason</code>, or <code>None</code> if <code>value</code>…\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>DataSourceStopReason</code>.\nDecodes an instance of the message from a buffer, and …\nFor trace processor metatracing.\nInterned strings corresponding to the |event_name_iid|, …\nSee base/metatrace_events.h for definitions.\nNested message and enum types in <code>Arg</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>iid</code>, or the default value if <code>iid</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>value</code>, or the default value if <code>value</code> …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nEvent group to record, as defined by the modem.\nEvents suitable for high and low bandwidth tracing.\nEvents suitable for low bandwidth tracing only.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>EventGroup</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>EventGroup</code>.\nReturns the value of <code>energy</code>, or the default value if <code>energy</code>…\nAccumulated energy since device boot in microwatt-seconds …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>index</code>, or the default value if <code>index</code> …\nReturns the value of <code>index</code>, or the default value if <code>index</code> …\nIndex corresponding to the rail\nIndex corresponding to RailDescriptor.index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>rail_name</code>, or the default value if …\nName of the rail\nReturns the value of <code>sampling_rate</code>, or the default value …\nHardware sampling rate (Hz).\nReturns the value of <code>subsys_name</code>, or the default value if …\nName of the subsystem to which this rail belongs\nReturns the value of <code>timestamp_ms</code>, or the default value if …\nTime since device boot(CLOCK_BOOTTIME) in milli-seconds.\nSee chromium’s content::ProcessType.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ChromeProcessType</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ChromeProcessType</code>.\nPer-thread periodically sampled stats. Note: not all of …\nReturns the value of <code>chrome_peak_resident_set_kb</code>, or the …\nReturns the value of <code>chrome_private_footprint_kb</code>, or the …\nPrivate, shared and swap footprint of the process as …\nReturns the value of <code>fd</code>, or the default value if <code>fd</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>is_peak_rss_resettable</code>, or the …\nThe peak resident set size is resettable in newer Posix …\nReturns the value of <code>oom_score_adj</code>, or the default value …\nReturns the value of <code>path</code>, or the default value if <code>path</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>rss_anon_kb</code>, or the default value if …\nReturns the value of <code>rss_file_kb</code>, or the default value if …\nReturns the value of <code>rss_shmem_kb</code>, or the default value if …\nReturns the value of <code>runtime_kernel_mode</code>, or the default …\nTime spent scheduled in kernel mode in nanoseconds. Parsed …\nReturns the value of <code>runtime_user_mode</code>, or the default …\nTime spent scheduled in user mode in nanoseconds. Parsed …\nReturns the value of <code>smr_pss_anon_kb</code>, or the default value …\nReturns the value of <code>smr_pss_file_kb</code>, or the default value …\nReturns the value of <code>smr_pss_kb</code>, or the default value if …\nReturns the value of <code>smr_pss_shmem_kb</code>, or the default …\nReturns the value of <code>smr_rss_kb</code>, or the default value if …\nThese fields are set only when scan_smaps_rollup=true\nReturns the value of <code>smr_swap_pss_kb</code>, or the default value …\nReturns the value of <code>tid</code>, or the default value if <code>tid</code> is …\nReturns the value of <code>vm_hwm_kb</code>, or the default value if …\nWhen adding a new field remember to update …\nReturns the value of <code>vm_locked_kb</code>, or the default value if …\nReturns the value of <code>vm_rss_kb</code>, or the default value if …\nReturns the value of <code>vm_size_kb</code>, or the default value if …\nSee /proc/[pid]/status in <code>man 5 proc</code> for a description of …\nReturns the value of <code>vm_swap_kb</code>, or the default value if …\nThis has been deprecated and ignored as per 2018-05-01. …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Quirks</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Quirks</code>.\nRepresentation of a process.\nRepresentation of a thread.\nThe command line for the process, as per /proc/pid/cmdline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nThe name of the thread.\nThe non-root-level process IDs if the process runs in a …\nThe non-root-level thread IDs if the thread runs in a PID …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nThe UNIX process ID, aka thread group ID (as per getpid()) …\nReturns the value of <code>ppid</code>, or the default value if <code>ppid</code> is …\nThe parent process ID, as per getppid().\nReturns the value of <code>process_start_from_boot</code>, or the …\nTimestamp of when the process was created, in nanoseconds …\nReturns the value of <code>tgid</code>, or the default value if <code>tgid</code> is …\nThread group id (i.e. the PID of the process, == TID of …\nReturns the value of <code>tid</code>, or the default value if <code>tid</code> is …\nThe thread ID (as per gettid()) in the root PID namespace.\nReturns the value of <code>uid</code>, or the default value if <code>uid</code> is …\nThe uid for the process, as per /proc/pid/status.\nNext ID: 9\nReturns the value of <code>alloc_count</code>, or the default value if …\nNumber of allocations that were sampled at this callstack.\nReturns the value of <code>buffer_corrupted</code>, or the default …\nIf disconnected, this disconnected was caused by the …\nReturns the value of <code>buffer_overran</code>, or the default value …\nIf disconnected, this disconnect was caused by the client …\nReturns the value of <code>callstack_id</code>, or the default value if …\nReturns the enum value of <code>client_error</code>, or the default if …\nReturns the value of <code>client_spinlock_blocked_us</code>, or the …\nReturns the value of <code>disconnected</code>, or the default value if …\nThis process disconnected while it was profiled. If false, …\nReturns the value of <code>free_count</code>, or the default value if …\nNumber of allocations that were sampled at this callstack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>from_startup</code>, or the default value if …\nThis process was profiled from startup. If false, this …\nReturns the value of <code>heap_name</code>, or the default value if …\nReturns the value of <code>heap_samples</code>, or the default value if …\nNested message and enum types in <code>Histogram</code>.\nReturns the value of <code>hit_guardrail</code>, or the default value …\nIf disconnected, this disconnect was caused by heapprofd …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>map_reparses</code>, or the default value if …\nReturns the value of <code>orig_sampling_interval_bytes</code>, or the …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nNested message and enum types in <code>ProcessHeapSamples</code>.\nReturns the value of <code>rejected_concurrent</code>, or the default …\nThis process was not profiled because a concurrent session …\nReturns the value of <code>sampling_interval_bytes</code>, or the …\nReturns the value of <code>self_allocated</code>, or the default value …\nbytes allocated at this callstack.\nReturns the value of <code>self_freed</code>, or the default value if …\nbytes allocated at this callstack that have been freed.\nReturns the value of <code>self_max</code>, or the default value if …\nBytes allocated by this callstack but not freed at the …\nReturns the value of <code>self_max_count</code>, or the default value …\nNumber of allocations that were sampled at this callstack …\nSets <code>client_error</code> to the provided enum value.\nMetadata about heapprofd.\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\ntimestamp [opt]\nTimestamp of the state of the target process that this …\nReturns the value of <code>total_unwinding_time_us</code>, or the …\nReturns the value of <code>unwinding_errors</code>, or the default …\nReturns the value of <code>count</code>, or the default value if <code>count</code> …\nNumber of values that fall into this range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>max_bucket</code>, or the default value if …\nThis is the highest bucket. This is set instead of the …\nReturns the value of <code>upper_limit</code>, or the default value if …\nThis bucket counts values from the previous bucket’s (or …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ClientError</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ClientError</code>.\nThe following values aren’t expected, but included for …\nEnumeration of libunwindstack’s error codes. NB: the …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>CpuMode</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>StackUnwindError</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>CpuMode</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StackUnwindError</code>.\nWhen using the DEFAULT tracing mode, only log groups and …\nWhen using the ENABLE_ALL tracing mode, all log groups and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>TracingMode</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TracingMode</code>.\ninformation about a ProtoLog log group\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>group_id</code>, or the default value if …\nthe id of the log group this message belongs to\nReturns the value of <code>id</code>, or the default value if <code>id</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the enum value of <code>level</code>, or the default if the …\nthe level of the message\nReturns the value of <code>message</code>, or the default value if …\nthe string representation of the message\nReturns the value of <code>message_id</code>, or the default value if …\nthe id of the message that is logged in a ProtoLogMessage\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nSets <code>level</code> to the provided enum value.\nReturns the value of <code>tag</code>, or the default value if <code>tag</code> is …\nThe reason for the priority boost. The ordering is …\nApply the increment, which will decay incrementally at the …\nApply the increment as a boost that will decay in its …\nThe kernel stack is currently swapped out.\nThe process address space is swapped out.\nThe thread has been readied from DPC (deferred procedure …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>AdjustReason</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>TraceFlag</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>AdjustReason</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TraceFlag</code>.\nSynchronized clock snapshots taken on both sides of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the information about the windows targeted in a …\nReturns the value of <code>flags</code>, or the default value if <code>flags</code> …\nThe flags set on this target.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>layer_id</code>, or the default value if …\nThe layer id of this target.\nReturns the value of <code>mode</code>, or the default value if <code>mode</code> is …\nThe transition mode of this target (e.g. TO_FRONT, CLOSE……\nReturns the value of <code>window_id</code>, or the default value if …\nThe window id of this target.\nTrace layers snapshots. A snapshot is taken every time a …\nINPUT | COMPOSITION | EXTRA\nTrace a single layers snapshot.\nGenerate layers snapshots from the transactions kept in the\nDefault mode (applied by SurfaceFlinger if no mode is …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Mode</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>TraceFlag</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Mode</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TraceFlag</code>.\nSurfaceFlinger writes the initial state and then each …\nDefault mode (applied by SurfaceFlinger if no mode is …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Mode</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Mode</code>.\nTimes in each mode, since boot. Unit: nanoseconds.\nFrequencies for /sys/class/devfreq/ entries in kHz.\nCounters from /proc/diskstats.\nCounters from /proc/meminfo. Values are in KB.\nReading from /proc/pressure/*.\nCounter from /proc/vmstat. Units are often pages, not KB.\nReturns the value of <code>count</code>, or the default value if <code>count</code> …\nReturns the value of <code>cpu_id</code>, or the default value if <code>cpu_id</code>…\nReturns the value of <code>device_name</code>, or the default value if …\nReturns the value of <code>discard_sectors</code>, or the default value …\nReturns the value of <code>discard_time_ms</code>, or the default value …\nReturns the value of <code>flush_count</code>, or the default value if …\nReturns the value of <code>flush_time_ms</code>, or the default value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of <code>idle_ns</code>, or the default value if …\nTime spent in the idle task.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>io_wait_ns</code>, or the default value if …\nTime spent waiting for I/O.\nReturns the value of <code>irq</code>, or the default value if <code>irq</code> is …\nReturns the value of <code>irq_ns</code>, or the default value if <code>irq_ns</code>…\nTime spent servicing interrupts.\nReturns the enum value of <code>key</code>, or the default if the field …\nReturns the enum value of <code>key</code>, or the default if the field …\nReturns the value of <code>key</code>, or the default value if <code>key</code> is …\nReturns the value of <code>node</code>, or the default value if <code>node</code> is …\nNested message and enum types in <code>PsiSample</code>.\nReturns the value of <code>read_sectors</code>, or the default value if …\nReturns the value of <code>read_time_ms</code>, or the default value if …\nReturns the enum value of <code>resource</code>, or the default if the …\nSets <code>key</code> to the provided enum value.\nSets <code>key</code> to the provided enum value.\nSets <code>resource</code> to the provided enum value.\nReturns the value of <code>softirq_ns</code>, or the default value if …\nTime spent servicing softirqs.\nReturns the value of <code>system_mode_ns</code>, or the default value …\nTime spent in system mode.\nReturns the value of <code>total_ns</code>, or the default value if …\nTotal absolute stall time (in nanos) for a given resource. …\nReturns the value of <code>user_nice_ns</code>, or the default value if …\nTime spent in user mode (low prio).\nReturns the value of <code>user_ns</code>, or the default value if …\nTime spent in user mode.\nReturns the value of <code>value</code>, or the default value if <code>value</code> …\nReturns the value of <code>value</code>, or the default value if <code>value</code> …\nReturns the value of <code>value</code>, or the default value if <code>value</code> …\nReturns the value of <code>write_sectors</code>, or the default value …\nReturns the value of <code>write_time_ms</code>, or the default value …\nReturns the value of <code>zone</code>, or the default value if <code>zone</code> is …\nType of resource that may have exhibited pressure stalls. …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>PsiResource</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PsiResource</code>.\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>StatCounters</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StatCounters</code>.\nReturns the value of <code>field_bytes</code>, or the default value if …\nReturns the value of <code>field_double</code>, or the default value if …\nReturns the value of <code>field_fixed32</code>, or the default value …\nReturns the value of <code>field_fixed64</code>, or the default value …\nReturns the value of <code>field_float</code>, or the default value if …\nReturns the value of <code>field_int32</code>, or the default value if …\nReturns the value of <code>field_int64</code>, or the default value if …\nReturns the value of <code>field_sfixed32</code>, or the default value …\nReturns the value of <code>field_sfixed64</code>, or the default value …\nReturns the value of <code>field_sint32</code>, or the default value if …\nReturns the value of <code>field_sint64</code>, or the default value if …\nReturns the value of <code>field_string</code>, or the default value if …\nReturns the value of <code>field_uint32</code>, or the default value if …\nReturns the value of <code>field_uint64</code>, or the default value if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>remaining_nesting_depth</code>, or the …\nWhen 0 this is the bottom-most nested message.\nReturns the value of <code>single_int</code>, or the default value if …\nReturns the value of <code>single_string</code>, or the default value …\nCompositor:\nTracing related threads:\nScheduler:\nRenderer:\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ChromeThreadType</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ChromeThreadType</code>.\nAndroid-only. Not for general use. If set, reports the …\nConfig for disabling builtin data sources in the tracing …\nIf set, delays the start of tracing by a random duration. …\nCompress trace with the given method. Best effort.\nContains flags which override the default values of the …\nAndroid-only. Not for general use. If set, saves the trace …\nConfiguration for trace contents that reference earlier …\nWhen non-empty, ensures that for a each semaphore named …\nContains statsd-specific metadata about an alert …\nWhen set applies a post-filter to the trace contents using …\nTriggers allow producers to start or stop the tracing …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNested message and enum types in <code>BufferConfig</code>.\nReturns the value of <code>bytecode</code>, or the default value if …\nThe bytecode as implemented in Android T.\nReturns the value of <code>bytecode_v2</code>, or the default value if …\nThe bytecode as implemented in Android U. Adds support for …\nReturns the value of <code>clear_before_clone</code>, or the default …\nUsed in conjuction with transfer_on_clone. When true the …\nReturns the value of <code>clear_period_ms</code>, or the default value …\nIf nonzero, notify eligible data sources to clear their …\nFilters and data-source specific config. It contains also …\nReturns the value of <code>destination_class</code>, or the default …\nReturns the value of <code>destination_package</code>, or the default …\nReturns the value of <code>disable_chunk_usage_histograms</code>, or …\nDisables the reporting of per-trace-writer histograms in …\nReturns the value of <code>disable_clock_snapshotting</code>, or the …\nDisable emitting clock timestamps into the trace.\nReturns the value of <code>disable_service_events</code>, or the …\nDisable emitting events for data-source state changes …\nReturns the value of <code>disable_system_info</code>, or the default …\nDisable emitting system info (build fingerprint, cpuinfo, …\nReturns the value of <code>disable_trace_config</code>, or the default …\nDisable echoing the original trace config in the trace.\nReturns the enum value of <code>fill_policy</code>, or the default if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>LockdownModeOperation</code>, or <code>None</code> if …\nConverts an <code>i32</code> to a <code>CompressionType</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>StatsdLogging</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>LockdownModeOperation</code>…\nReturns <code>true</code> if <code>value</code> is a variant of <code>CompressionType</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StatsdLogging</code>.\nReturns the value of <code>max_delay_ms</code>, or the default value if …\nReturns the value of <code>max_other_session_count</code>, or the …\nThe maximum number of <em>other</em> sesssions which specify the …\nReturns the value of <code>max_tracing_buffer_size_kb</code>, or the …\nOverrides the guardrail for maximum trace buffer size. …\nReturns the value of <code>max_upload_per_day_bytes</code>, or the …\nOverride the default limit (in bytes) for uploading data …\nReturns the value of <code>min_delay_ms</code>, or the default value if …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nThe name of the semaphore. Acts as a unique identifier …\nReturns the value of <code>page_size_kb</code>, or the default value if …\nSpecifies the preferred size of each page in the shared …\nReturns the value of <code>prefer_suspend_clock_for_snapshot</code>, or …\nHints to the service that a suspend-aware (i.e. counting …\nReturns the enum value of <code>primary_trace_clock</code>, or the …\nThe authoritative clock domain for the trace. Defaults to …\nReturns the value of <code>privacy_level</code>, or the default value …\nLevel of filtering in the requested incident. See …\nReturns the value of <code>producer_name</code>, or the default value …\nIdentifies the producer for which this config is for.\nOptional. If multiple producers (~processes) expose the …\nReturns the value of <code>reporter_service_class</code>, or the …\nReturns the value of <code>reporter_service_package</code>, or the …\nSets <code>fill_policy</code> to the provided enum value.\nSets <code>primary_trace_clock</code> to the provided enum value.\nSets <code>trigger_mode</code> to the provided enum value.\nReturns the value of <code>shm_size_kb</code>, or the default value if …\nSpecifies the preferred size of the shared memory buffer. …\nReturns the value of <code>size_kb</code>, or the default value if …\nReturns the value of <code>skip_dropbox</code>, or the default value if …\nIf true, do not write the trace into dropbox (i.e. …\nReturns the value of <code>skip_incidentd</code>, or the default value …\nIf true, then skips saving the trace to incidentd.\nReturns the value of <code>skip_report</code>, or the default value if …\nIf true, then skips reporting the trace to Android …\nReturns the value of <code>snapshot_interval_ms</code>, or the default …\nTime interval in between snapshotting of sync markers, …\nNested message and enum types in <code>TraceFilter</code>.\nReturns the value of <code>transfer_on_clone</code>, or the default …\nWhen true the buffer is moved (rather than copied) onto …\nNested message and enum types in <code>TriggerConfig</code>.\nReturns the enum value of <code>trigger_mode</code>, or the default if …\nReturns the value of <code>trigger_timeout_ms</code>, or the default …\nRequired and must be positive if a TriggerConfig is …\nReturns the value of <code>triggering_alert_id</code>, or the default …\nThe identifier of the alert which triggered this trace.\nReturns the value of <code>triggering_config_id</code>, or the default …\nThe identifier of the config which triggered the alert.\nReturns the value of <code>triggering_config_uid</code>, or the default …\nThe uid which registered the triggering configuration with …\nReturns the value of <code>triggering_subscription_id</code>, or the …\nThe identifier of the subscription which triggered this …\nA list of triggers which are related to this …\nReturns the value of <code>use_clone_snapshot_if_available</code>, or …\nThis flag is really a workaround for b/274931668. This is …\nReturns the value of <code>use_pipe_in_framework_for_testing</code>, or …\nIf true, will direct the Android framework to read the …\nBehaves like RING_BUFFER as long as there is space in the …\nDefault behavior. The buffer operates as a conventional …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>FillPolicy</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FillPolicy</code>.\nLike |SFP_MATCH_BREAK| but tries to do some pre-work …\nLike |SFP_MATCH_REDACT_GROUPS| but tries to do some …\nTries to repeatedly search (i.e. find substrings of) the …\nTries to match the string field against |regex_pattern|. …\nTries to match the string field against |regex_pattern|. …\nA chain is a list of rules which string will be …\nA policy specifies which algorithm should be used for …\nA rule specifies how strings should be filtered.\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>atrace_payload_starts_with</code>, or the …\nThe string which should appear after the tgid in atrace …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>StringFilterPolicy</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StringFilterPolicy</code>.\nReturns the enum value of <code>policy</code>, or the default if the …\nThe policy (i.e. algorithm) dictating how strings matching …\nReturns the value of <code>regex_pattern</code>, or the default value …\nThe regex pattern used to match against each string.\nSets <code>policy</code> to the provided enum value.\nWhen this mode is chosen, this causes a snapshot of the …\nWhen this mode is chosen, data sources are not started …\nWhen this mode is chosen, the session will be started via …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>TriggerMode</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TriggerMode</code>.\nReturns the value of <code>max_per_24_h</code>, or the default value if …\nLimits the number of traces this trigger can start/stop in …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nThe producer must specify this name to activate the …\nReturns the value of <code>producer_name_regex</code>, or the default …\nAn std::regex that will match the producer that can …\nReturns the value of <code>skip_probability</code>, or the default …\nA value between 0 and 1 which encodes the probability of …\nReturns the value of <code>stop_delay_ms</code>, or the default value …\nAfter a trigger is received either in START_TRACING or …\nZero or more proto encoded trace packets compressed using …\nEvents from the Windows etw infrastructure.\nData sources can extend the trace proto with custom …\nThis field is only used for testing. In previous versions …\nEvents from the Linux kernel ftrace infrastructure.\nRepresents a single packet sent or received by the network.\nRepresents one or more packets sent or received by the …\nService-assigned identifier of the packet sequence this …\nTrusted user id of the producer which generated this …\nDeprecated, use TrackDescriptor instead.\nOnly used in profile packets.\nClock synchronization with remote machines.\nSet by the writer to indicate that it will re-emit any …\nThis packet requires incremental state, such as …\nWinscope traces\nThis field is emitted at periodic intervals (~10s) and …\nDeprecated, use TrackDescriptor instead.\nOnly used by TrackEvent.\nThe “range of interest” for track events. See the …\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>SequenceFlags</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SequenceFlags</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nFrom TraceBuffer::Stats.\nThis is set only when the TraceConfig specifies a …\nPer TraceWriter stat. Each {producer, trace writer} tuple …\nReturns the value of <code>abi_violations</code>, or the default value …\nNum. of violations of the SharedMemoryABI found while …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>buffer</code>, or the default value if <code>buffer</code>…\nThe buffer index (0..N, as defined in the TraceConfig).\nReturns the value of <code>buffer_size</code>, or the default value if …\nSize of the circular buffer in bytes.\nThe number of bytes discarded by the filter (i.e. output - …\nReturns the value of <code>bytes_overwritten</code>, or the default …\nNum. bytes overwritten before they have been read (i.e. …\nReturns the value of <code>bytes_read</code>, or the default value if …\nTotal size of chunks that were fully read from the …\nReturns the value of <code>bytes_written</code>, or the default value …\nNum. bytes written into the circular buffer, including …\nThese two arrays have the same cardinality and match the …\nReturns the value of <code>chunks_committed_out_of_order</code>, or the …\nNum. chunks that were committed out of order.\nReturns the value of <code>chunks_discarded</code>, or the default …\nNum. chunks discarded (i.e. loss of data). Can be &gt; 0 only …\nReturns the value of <code>chunks_overwritten</code>, or the default …\nNum. chunks overwritten before they have been read (i.e. …\nReturns the value of <code>chunks_read</code>, or the default value if …\nNum. chunks (!= packets) that were fully read from the …\nReturns the value of <code>chunks_rewritten</code>, or the default …\nNum. chunks (!= packets) rewritten into the buffer. This …\nReturns the value of <code>chunks_written</code>, or the default value …\nNum. chunks (!= packets) written into the buffer.\nReturns the value of <code>errors</code>, or the default value if <code>errors</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>FinalFlushOutcome</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nReturns the value of <code>input_bytes</code>, or the default value if …\nReturns the value of <code>input_packets</code>, or the default value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FinalFlushOutcome</code>.\nReturns the value of <code>output_bytes</code>, or the default value if …\nReturns the value of <code>padding_bytes_cleared</code>, or the default …\nNum. of padding bytes that were removed from the circular …\nReturns the value of <code>padding_bytes_written</code>, or the default …\nNum. bytes that were allocated as padding between chunks …\nReturns the value of <code>patches_failed</code>, or the default value …\nNum. OOB patches that failed (e.g., the chunk to patch was …\nReturns the value of <code>patches_succeeded</code>, or the default …\nNum. out-of-band (OOB) patches that succeeded.\nReturns the value of <code>readaheads_failed</code>, or the default …\nNum. readaheads aborted because of missing chunks in the …\nReturns the value of <code>readaheads_succeeded</code>, or the default …\nNum. readaheads (for large multi-chunk packet reads) that …\nReturns the value of <code>sequence_id</code>, or the default value if …\nThis matches the TracePacket.trusted_packet_sequence_id …\nReturns the value of <code>time_taken_ns</code>, or the default value …\nReturns the value of <code>trace_writer_packet_loss</code>, or the …\nNum. of times the service detected packet loss on a trace …\nReturns the value of <code>write_wrap_count</code>, or the default …\nNum. times the ring buffer wrapped around.\nEmitted when all data sources have been flushed …\nEmitted after all data sources saw the start event and …\nWhen each of the following booleans are set to true, they …\nEmitted when reading back the central tracing buffers has …\nEmitted if perfetto –save-for-bugreport was invoked …\nEmitted after tracing has been disabled and specifically, …\nEmitted when we start tracing and specifically, this will …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThis field is only set by the SDK when …\nName of the track. Optional - if unspecified, it may be …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEvent that provides a value for a counter track. …\nA new value for a counter track. |track_uuid| should refer …\nInstant events are nestable events without duration. They …\nApart from {category, time, thread time, tid, pid}, other …\nnon-interned variant.\nOptional name of the event for its display in trace …\ninterned EventName.\nSlice events are events that have a begin and end …\nNon-interned field.\nThis field is used only if the source location represents …\nInterned field.\nDeprecated. Use |extra_counter_values| and …\nSame encoding as |thread_time| field above.\nDeprecated. Use |extra_counter_values| and …\nThis is a one-off absolute value that does not affect …\nDelta timestamp value since the last TrackEvent or …\nDeprecated. Use the |timestamp| and |timestamp_clock_id| …\nAbsolute value (e.g. a manually specified timestamp in the …\nDelta timestamp value since the last TrackEvent or …\nType of the TrackEvent (required if |phase| in LegacyEvent …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>bind_id</code>, or the default value if …\nIdenfifies a flow. Flow events with the same bind_id are …\nReturns the value of <code>bind_to_enclosing</code>, or the default …\nUse the enclosing slice as binding point for a flow end …\nReturns the value of <code>duration_us</code>, or the default value if …\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the enum value of <code>flow_direction</code>, or the default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nReturns the value of <code>id_scope</code>, or the default value if …\nAdditional optional scope for |id|.\nReturns the enum value of <code>instant_event_scope</code>, or the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nNested message and enum types in <code>LegacyEvent</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>name_iid</code>, or the default value if …\nDeprecated, use TrackEvent::name(_iid) instead. interned …\nReturns the value of <code>phase</code>, or the default value if <code>phase</code> …\nReturns the value of <code>pid_override</code>, or the default value if …\nOverride the pid/tid if the writer needs to emit events on …\nSets <code>flow_direction</code> to the provided enum value.\nSets <code>instant_event_scope</code> to the provided enum value.\nReturns the value of <code>thread_duration_us</code>, or the default …\nReturns the value of <code>thread_instruction_delta</code>, or the …\nElapsed retired instruction count during the event.\nReturns the value of <code>tid_override</code>, or the default value if …\nReturns the value of <code>use_async_tts</code>, or the default value …\nConsider the thread timestamps for async BEGIN/END event …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>FlowDirection</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>InstantEventScope</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FlowDirection</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>InstantEventScope</code>.\nDecodes an instance of the message from a buffer, and …\nRACE (little-endian ASCII)\nTNXT (little-endian ASCII)\nconstant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H &lt;&lt; 32 | …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>MagicNumber</code>, or <code>None</code> if <code>value</code> is not …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MagicNumber</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nIndicates that the given process should be highlighted by …\nReturns the argument unchanged.\nNested message and enum types in <code>HighlightProcess</code>.\nCalls <code>U::from(self)</code>.\nThe command line of the process to highlight; for most …\nThe pid of the process to highlight. This is useful for …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe name of the uninterpreted option.  Each string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>is_extension</code>, or the default value if …\nReturns the value of <code>name_part</code>, or the default value if …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Tier</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Tier</code>.\nDecodes an instance of the message from a buffer, and …\nISO/IEC 8859-1:1998 encoding aka latin1 …\nUTF-16 Big Endian Encoding\nUTF-16 Little Endian Encoding\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Tier</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Tier</code>.\nFor recording vkSetDebugUtilsObjectNameEXT and …\nFor recording vkQueueSubmit call.\nReturns the value of <code>duration_ns</code>, or the default value if …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the value of <code>object</code>, or the default value if <code>object</code>…\nReturns the value of <code>object_name</code>, or the default value if …\nReturns the value of <code>object_type</code>, or the default value if …\nVkObjectType.  Value must match …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>pid</code>, or the default value if <code>pid</code> is …\nReturns the value of <code>submission_id</code>, or the default value …\nSubmission ID.  An identifier unique to each vkQueueSubmit …\nReturns the value of <code>tid</code>, or the default value if <code>tid</code> is …\nReturns the value of <code>vk_device</code>, or the default value if …\nReturns the value of <code>vk_queue</code>, or the default value if …\nonly annotations\nbind buffer and image\nalloc, create\nfree, destroy(non-bound)\ndestroy (bound)\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Source</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>Operation</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>AllocationScope</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Source</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Operation</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>AllocationScope</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA writer for Perfetto traces that writes packets through …\nEmits an async span begin event to the stream.\nEmits an async span end event to the stream.\nEmits an async track descriptor packet to the stream …\nEmits a process descriptor packet to the stream.\nEmits a span event to the stream.\nEmits a thread descriptor packet to the stream.\nFlushes any buffered data in the writer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the writer and returns the underlying AsyncWriter.\nCreates a new <code>PerfettoWriter</code> instance.\nWrites a single TracePacket to the chunk sender with …")